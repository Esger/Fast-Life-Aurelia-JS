{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","resources/elements/controls.js","resources/elements/life.js","resources/elements/main.js","resources/elements/stats.js","resources/services/life-worker-service.js"],"names":["App","message","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","ControlsCustomElement","eventAggregator","ea","trails","clear","publish","stop","step","random","toggleTrails","LifeCustomElement","lifeWorkerService","lfWs","cellSize","cellsAlive","fillRatio","speedHandle","opacity","countGenerations","speed","lifeSteps","prevSteps","cellCount","generations","stackSize","clearSpace","ctx","fillStyle","fillRect","canvas","width","height","animateStep","drawFromStack","setTimeout","cells","offScreen","ctxOffscreen","i","length","cell","x","y","drawImage","offScreenCanvas","canvasWidth","canvasHeight","initLife","document","getElementById","getContext","spaceWidth","Math","floor","spaceHeight","createElement","liferules","init","setInterval","addListeners","subscribe","attached","MainCustomElement","StatsCustomElement","response","LifeWorkerService","_lifeStack","batchMultiplier","stackCheckHandle","stackLowCheckHandle","stopHandle","wrkr","Worker","onmessage","e","data","push","keepStack","clearInterval","w","h","rules","batchSize","workerData","postMessage","minStackSize","console","log","getBatch","shift"],"mappings":";;;;;;;;;;;;;MAAaA,cAAAA,MACX,eAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,cAAf;AACD;;;;;;;;oBCHY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCUCC,YAAAA;;;;;;;;;;AAPhBC,UAAQC,MAAR,CAAe;AACbC,qBAAiB,sBAAYL,KADhB;AAEbM,cAAU;AACRC,wBAAkB;AADV;AAFG,GAAf;;AAOO,WAASL,SAAT,CAAmBM,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYX,KAAhB,EAAuB;AACrBQ,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYX,OAAhB,EAAyB;AACvBO,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMP,QAAQQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCxBed,YAAAA;AAAT,WAASA,SAAT,CAAmBE,MAAnB,EAA2B,CAEjC;;;;;;;;;;;;;;;;;;QCMYa,gCAAAA,gCADZ;AAGG,uCAAYC,eAAZ,EAA6B;AAAA;;AACzB,iBAAKC,EAAL,GAAUD,eAAV;AACA,iBAAKE,MAAL,GAAc,IAAd;AACH;;wCAEDC,yBAAQ;AACJ,iBAAKF,EAAL,CAAQG,OAAR,CAAgB,OAAhB;AACH;;wCACDC,uBAAO;AACH,iBAAKJ,EAAL,CAAQG,OAAR,CAAgB,MAAhB;AACH;;wCACDE,uBAAO;AACH,iBAAKL,EAAL,CAAQG,OAAR,CAAgB,MAAhB;AACH;;wCACDR,yBAAQ;AACJ,iBAAKK,EAAL,CAAQG,OAAR,CAAgB,OAAhB;AACH;;wCAIDG,2BAAS;AACL,iBAAKN,EAAL,CAAQG,OAAR,CAAgB,aAAhB;AACH;;wCACDI,uCAAe;AACX,iBAAKP,EAAL,CAAQG,OAAR,CAAgB,cAAhB,EAAgC,KAAKF,MAArC;AACH;;;;;;;;;;;;;;;;;;;;;QC1BQO,4BAAAA,4BADZ;AAIG,mCAAYT,eAAZ,EAA6BU,iBAA7B,EAAgD;AAAA;;AAC5C,iBAAKT,EAAL,GAAUD,eAAV;AACA,iBAAKW,IAAL,GAAYD,iBAAZ;AACA,iBAAKE,QAAL,GAAgB,CAAhB;AACA,iBAAKC,UAAL,GAAkB,CAAlB;AACA,iBAAKC,SAAL,GAAiB,EAAjB;AACA,iBAAKZ,MAAL,GAAc,IAAd;AACA,iBAAKa,WAAL,GAAmB,IAAnB;AACA,iBAAKC,OAAL,GAAe,IAAI,KAAKd,MAAL,GAAc,GAAjC;AACH;;oCAEDe,+CAAmB;AACf,iBAAKC,KAAL,GAAa,KAAKC,SAAL,GAAiB,KAAKC,SAAnC;AACA,iBAAKA,SAAL,GAAiB,KAAKD,SAAtB;AACA,iBAAKlB,EAAL,CAAQG,OAAR,CAAgB,OAAhB,EAAyB;AACrBiB,2BAAW,KAAKR,UADK;AAErBS,6BAAa,KAAKH,SAFG;AAGrBD,uBAAO,KAAKA,KAAL,GAAa,CAHC;AAIrBK,2BAAW,KAAKZ,IAAL,CAAUY;AAJA,aAAzB;AAMH;;oCAEDC,mCAAa;AACT,iBAAKC,GAAL,CAASC,SAAT,GAAqB,oBAArB;AACA,iBAAKD,GAAL,CAASE,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,KAAKC,MAAL,CAAYC,KAApC,EAA2C,KAAKD,MAAL,CAAYE,MAAvD;AACH;;oCAEDC,qCAAc;AAAA;;AACV,iBAAKC,aAAL;AACAC,uBAAW,YAAM;AAAE,sBAAKF,WAAL;AAAqB,aAAxC,EAA0C,CAA1C;AACH;;oCAEDC,yCAAgB;AACZ,gBAAIE,QAAQ,KAAKvB,IAAL,CAAUuB,KAAtB;AACA,gBAAMtB,WAAW,KAAKA,QAAtB;AACA,gBAAMuB,YAAY,KAAKC,YAAvB;AACA,gBAAIF,KAAJ,EAAW;AACPC,0BAAUT,SAAV,GAAsB,yBAAyB,KAAKV,OAA9B,GAAwC,GAA9D;AACAmB,0BAAUR,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKC,MAAL,CAAYC,KAArC,EAA4C,KAAKD,MAAL,CAAYE,MAAxD;;AAEAK,0BAAUT,SAAV,GAAsB,sBAAtB;AACA,oBAAIW,IAAIH,MAAMI,MAAN,GAAe,CAAvB;AACA,uBAAOD,KAAK,CAAZ,EAAe;AACX,wBAAIE,OAAOL,MAAMG,CAAN,CAAX,CAAqBA,KAAK,CAAL;AACrBF,8BAAUR,QAAV,CAAmBY,KAAKC,CAAL,GAAS5B,QAA5B,EAAsC2B,KAAKE,CAAL,GAAS7B,QAA/C,EAAyDA,QAAzD,EAAmEA,QAAnE;AACH;AACD,qBAAKa,GAAL,CAASiB,SAAT,CAAmB,KAAKC,eAAxB,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAAKC,WAApD,EAAiE,KAAKC,YAAtE;AACA,qBAAKhC,UAAL,GAAkBqB,MAAMI,MAAxB;AACA,qBAAKnB,SAAL,IAAkB,CAAlB;AACH;AACJ;;oCAED2B,+BAAW;AAAA;;AACP,iBAAK9B,OAAL,GAAe,IAAI,KAAKd,MAAL,GAAc,GAAjC;AACA,iBAAK0B,MAAL,GAAcmB,SAASC,cAAT,CAAwB,MAAxB,CAAd;AACA,iBAAKvB,GAAL,GAAW,KAAKG,MAAL,CAAYqB,UAAZ,CAAuB,IAAvB,CAAX;AACA,iBAAKL,WAAL,GAAmB,KAAKhB,MAAL,CAAYC,KAA/B;AACA,iBAAKgB,YAAL,GAAoB,KAAKjB,MAAL,CAAYE,MAAhC;AACA,iBAAKoB,UAAL,GAAkBC,KAAKC,KAAL,CAAW,KAAKR,WAAL,GAAmB,KAAKhC,QAAnC,CAAlB;AACA,iBAAKyC,WAAL,GAAmBF,KAAKC,KAAL,CAAW,KAAKP,YAAL,GAAoB,KAAKjC,QAApC,CAAnB;;AAEA,iBAAK+B,eAAL,GAAuBI,SAASO,aAAT,CAAuB,QAAvB,CAAvB;AACA,iBAAKX,eAAL,CAAqBd,KAArB,GAA6B,KAAKe,WAAlC;AACA,iBAAKD,eAAL,CAAqBb,MAArB,GAA8B,KAAKe,YAAnC;AACA,iBAAKT,YAAL,GAAoB,KAAKO,eAAL,CAAqBM,UAArB,CAAgC,IAAhC,CAApB;;AAEA,iBAAKM,SAAL,GAAiB,CACb,KADa,EACN,KADM,EACC,KADD,EACQ,IADR,EACc,KADd,EACqB,KADrB,EAC4B,KAD5B,EACmC,KADnC,EAC0C,KAD1C,EACiD,KADjD,EAEb,KAFa,EAEN,KAFM,EAEC,IAFD,EAEO,IAFP,EAEa,KAFb,EAEoB,KAFpB,EAE2B,KAF3B,EAEkC,KAFlC,EAEyC,KAFzC,CAAjB;AAIA,iBAAKpC,SAAL,GAAiB,CAAjB;AACA,iBAAKC,SAAL,GAAiB,CAAjB;AACA,iBAAKT,IAAL,CAAU6C,IAAV,CAAe,KAAKN,UAApB,EAAgC,KAAKG,WAArC,EAAkD,KAAKE,SAAvD,EAAkE,KAAK3C,QAAvE;AACA,iBAAKG,WAAL,GAAmB0C,YAAY,YAAM;AAAE,uBAAKxC,gBAAL;AAA0B,aAA9C,EAAgD,GAAhD,CAAnB;AACH;;oCAEDyC,uCAAe;AAAA;;AACX,iBAAKzD,EAAL,CAAQ0D,SAAR,CAAkB,aAAlB,EAAiC,YAAM;AACnC,uBAAK5B,WAAL;AACH,aAFD;AAGA,iBAAK9B,EAAL,CAAQ0D,SAAR,CAAkB,MAAlB,EAA0B,YAAM;AAC5B,uBAAKhD,IAAL,CAAUN,IAAV;AACH,aAFD;AAGA,iBAAKJ,EAAL,CAAQ0D,SAAR,CAAkB,OAAlB,EAA2B,YAAM;AAC7B,uBAAK5B,WAAL;AACH,aAFD;AAGA,iBAAK9B,EAAL,CAAQ0D,SAAR,CAAkB,MAAlB,EAA0B,YAAM;AAC5B,uBAAK3B,aAAL;AACH,aAFD;AAGA,iBAAK/B,EAAL,CAAQ0D,SAAR,CAAkB,cAAlB,EAAkC,YAAM;AACpC,uBAAKzD,MAAL,GAAc,CAAC,OAAKA,MAApB;AACA,uBAAKc,OAAL,GAAe,IAAI,OAAKd,MAAL,GAAc,GAAjC;AACH,aAHD;AAIH;;oCAED0D,+BAAW;AACP,iBAAKd,QAAL;AACA,iBAAKY,YAAL;AACH;;;;;;;;;;;;;;;;;;QC9GQG,4BAAAA,oBACT,6BAAc;AAAA;AAEb;;;;;;;;;;;;;;;;;;QCKQC,6BAAAA,6BADZ;AAGG,oCAAY9D,eAAZ,EAA6B;AAAA;;AACzB,iBAAKC,EAAL,GAAUD,eAAV;AACA,iBAAKkB,KAAL,GAAa,CAAb;AACA,iBAAKK,SAAL,GAAiB,CAAjB;AACA,iBAAKF,SAAL,GAAiB,CAAjB;AACA,iBAAKC,WAAL,GAAmB,CAAnB;AACH;;qCAEDoC,uCAAe;AAAA;;AACX,iBAAKzD,EAAL,CAAQ0D,SAAR,CAAkB,OAAlB,EAA2B,oBAAY;AACnC,sBAAKtC,SAAL,GAAiB0C,SAAS1C,SAA1B;AACA,sBAAKC,WAAL,GAAmByC,SAASzC,WAA5B;AACA,sBAAKJ,KAAL,GAAa6C,SAAS7C,KAAtB;AACA,sBAAKK,SAAL,GAAiBwC,SAASxC,SAA1B;AACH,aALD;AAMH;;qCAEDqC,+BAAW;AACP,iBAAKF,YAAL;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCnBQM,4BAAAA,4BAFZ;AAIG,mCAAYhE,eAAZ,EAA6B;AAAA;;AAAA;;AACzB,iBAAKC,EAAL,GAAUD,eAAV;;AAEA,iBAAKiE,UAAL,GAAkB,EAAlB;AACA,iBAAKC,eAAL,GAAuB,CAAvB;AACA,iBAAKC,gBAAL,GAAwB,IAAxB;AACA,iBAAKC,mBAAL,GAA2B,IAA3B;AACA,iBAAKC,UAAL,GAAkB,IAAlB;AACA,iBAAKC,IAAL,GAAY,IAAIC,MAAJ,CAAW,yBAAX,CAAZ;AACA,iBAAKD,IAAL,CAAUE,SAAV,GAAsB,UAACC,CAAD,EAAO;AACzB,oBAAIA,EAAEC,IAAN,EAAY;AACR,wBAAI7F,UAAU4F,EAAEC,IAAF,CAAO7F,OAArB;AACA,4BAAQA,OAAR;AACI,6BAAK,eAAL;AAEI,kCAAKoF,UAAL,CAAgBU,IAAhB,CAAqBF,EAAEC,IAAF,CAAOxC,KAA5B;AACA;AACJ,6BAAK,OAAL;AACI,kCAAK0C,SAAL;AACA;AACJ,6BAAK,SAAL;AACIC,0CAAc,MAAKR,UAAnB;AACA;AACJ;AACI;AAZR;AAcH;AAEJ,aAnBD;AAoBH;;oCAUDb,qBAAKsB,GAAGC,GAAGC,OAAOpE,UAAUsB,OAAO;AAC/B,iBAAK8C,KAAL,GAAaA,KAAb;AACA,iBAAKpE,QAAL,GAAgBA,QAAhB;AACA,iBAAKqE,SAAL,GAAiB,KAAKf,eAAL,GAAuB,KAAKtD,QAA7C;AACA,gBAAIsE,aAAa;AACbrG,yBAAS,OADI;AAEbiG,mBAAGA,CAFU;AAGbC,mBAAGA,CAHU;AAIbC,uBAAOA,KAJM;AAKb1D,6BAAa,KAAK2D,SALL;AAMb/C,uBAAOA;AANM,aAAjB;AAQA,iBAAKoC,IAAL,CAAUa,WAAV,CAAsBD,UAAtB;AACH;;oCAEDN,iCAAY;AAAA;;AACR,gBAAIQ,eAAe,KAAKH,SAAxB;AACA,iBAAKd,gBAAL,GAAwBV,YAAY,YAAM;AACtC,oBAAI,OAAKlC,SAAL,GAAiB,OAAK0D,SAA1B,EAAqC;AACjCI,4BAAQC,GAAR,CAAY,UAAZ;AACA,2BAAKC,QAAL;AACAV,kCAAc,OAAKV,gBAAnB;AACH;AACJ,aANuB,EAMrB,GANqB,CAAxB;AAOH;;oCAED9D,uBAAO;AAAA;;AACH,gBAAI6E,aAAa;AACbrG,yBAAS;AADI,aAAjB;AAGA,iBAAKwF,UAAL,GAAkBZ,YAAY,YAAM;AAChC,uBAAKa,IAAL,CAAUa,WAAV,CAAsBD,UAAtB;AACH,aAFiB,EAEf,EAFe,CAAlB;AAGH;;oCAEDK,6BAASrD,OAAO;AACZ,gBAAIgD,aAAa;AACbrG,yBAAS,QADI;AAEbmG,uBAAO,KAAKA,KAFC;AAGb1D,6BAAa,KAAK2D,SAHL;AAIb/C,uBAAOA;AAJM,aAAjB;AAMA,iBAAKoC,IAAL,CAAUa,WAAV,CAAsBD,UAAtB;AACH;;;;gCAnDW;AACR,uBAAO,KAAKjB,UAAL,CAAgBuB,KAAhB,EAAP;AACH;;;gCAEe;AACZ,uBAAO,KAAKvB,UAAL,CAAgB3B,MAAvB;AACH","file":"app-bundle.js","sourcesContent":["export class App {\n  constructor() {\n    this.message = 'Hello World!';\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class ControlsCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.trails = true;\n    }\n\n    clear() {\n        this.ea.publish('clear');\n    }\n    stop() {\n        this.ea.publish('stop');\n    }\n    step() {\n        this.ea.publish('step');\n    }\n    start() {\n        this.ea.publish('start');\n    }\n    // continue() {\n    //     this.ea.publish('continue');\n    // }\n    random() {\n        this.ea.publish('startRandom');\n    }\n    toggleTrails() {\n        this.ea.publish('toggleTrails', this.trails);\n    }\n\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport { LifeWorkerService } from 'resources/services/life-worker-service';\n\n@inject(EventAggregator, LifeWorkerService)\nexport class LifeCustomElement {\n\n    // TODO try this https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/\n    constructor(eventAggregator, lifeWorkerService) {\n        this.ea = eventAggregator;\n        this.lfWs = lifeWorkerService;\n        this.cellSize = 2;\n        this.cellsAlive = 0;\n        this.fillRatio = 20;\n        this.trails = true;\n        this.speedHandle = null;\n        this.opacity = 1 - this.trails * 0.9;\n    }\n\n    countGenerations() {\n        this.speed = this.lifeSteps - this.prevSteps;\n        this.prevSteps = this.lifeSteps;\n        this.ea.publish('stats', {\n            cellCount: this.cellsAlive,\n            generations: this.lifeSteps,\n            speed: this.speed * 2,\n            stackSize: this.lfWs.stackSize\n        });\n    }\n\n    clearSpace() {\n        this.ctx.fillStyle = \"rgb(255, 255, 255)\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    animateStep() {\n        this.drawFromStack();\n        setTimeout(() => { this.animateStep(); }, 0);\n    }\n\n    drawFromStack() {\n        let cells = this.lfWs.cells;\n        const cellSize = this.cellSize;\n        const offScreen = this.ctxOffscreen;\n        if (cells) {\n            offScreen.fillStyle = \"rgba(255, 255, 255, \" + this.opacity + \")\";\n            offScreen.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            offScreen.fillStyle = \"rgba(128, 128, 0, 1)\";\n            let i = cells.length - 1;\n            while (i >= 0) {\n                let cell = cells[i]; i -= 1;\n                offScreen.fillRect(cell.x * cellSize, cell.y * cellSize, cellSize, cellSize);\n            }\n            this.ctx.drawImage(this.offScreenCanvas, 0, 0, this.canvasWidth, this.canvasHeight);\n            this.cellsAlive = cells.length;\n            this.lifeSteps += 1;\n        }\n    }\n\n    initLife() {\n        this.opacity = 1 - this.trails * 0.9;\n        this.canvas = document.getElementById('life');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvasWidth = this.canvas.width;\n        this.canvasHeight = this.canvas.height;\n        this.spaceWidth = Math.floor(this.canvasWidth / this.cellSize);\n        this.spaceHeight = Math.floor(this.canvasHeight / this.cellSize);\n\n        this.offScreenCanvas = document.createElement('canvas');\n        this.offScreenCanvas.width = this.canvasWidth;\n        this.offScreenCanvas.height = this.canvasHeight;\n        this.ctxOffscreen = this.offScreenCanvas.getContext('2d');\n\n        this.liferules = [\n            false, false, false, true, false, false, false, false, false, false,\n            false, false, true, true, false, false, false, false, false\n        ];\n        this.lifeSteps = 0; // Number of iterations / steps done\n        this.prevSteps = 0;\n        this.lfWs.init(this.spaceWidth, this.spaceHeight, this.liferules, this.cellSize);\n        this.speedHandle = setInterval(() => { this.countGenerations(); }, 500);\n    }\n\n    addListeners() {\n        this.ea.subscribe('startRandom', () => {\n            this.animateStep();\n        });\n        this.ea.subscribe('stop', () => {\n            this.lfWs.stop();\n        });\n        this.ea.subscribe('start', () => {\n            this.animateStep();\n        });\n        this.ea.subscribe('step', () => {\n            this.drawFromStack();\n        });\n        this.ea.subscribe('toggleTrails', () => {\n            this.trails = !this.trails;\n            this.opacity = 1 - this.trails * 0.9;\n        });\n    }\n\n    attached() {\n        this.initLife();\n        this.addListeners();\n    }\n\n\n}","export class MainCustomElement {\n    constructor() {\n\n    }\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class StatsCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.speed = 0;\n        this.stackSize = 0;\n        this.cellCount = 0;\n        this.generations = 0;\n    }\n\n    addListeners() {\n        this.ea.subscribe('stats', response => {\n            this.cellCount = response.cellCount;\n            this.generations = response.generations;\n            this.speed = response.speed;\n            this.stackSize = response.stackSize;\n        });\n    }\n\n    attached() {\n        this.addListeners();\n    }\n\n}","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class LifeWorkerService {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n\n        this._lifeStack = [];\n        this.batchMultiplier = 5;\n        this.stackCheckHandle = null;\n        this.stackLowCheckHandle = null;\n        this.stopHandle = null;\n        this.wrkr = new Worker('./assets/life-worker.js');\n        this.wrkr.onmessage = (e) => {\n            if (e.data) {\n                let message = e.data.message;\n                switch (message) {\n                    case 'newGeneration':\n                        // push Generation on stack\n                        this._lifeStack.push(e.data.cells);\n                        break;\n                    case 'ready':\n                        this.keepStack();\n                        break;\n                    case 'stopAck':\n                        clearInterval(this.stopHandle);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            // this.ea.publish('newGeneration', e.data);\n        };\n    }\n\n    get cells() {\n        return this._lifeStack.shift();\n    }\n\n    get stackSize() {\n        return this._lifeStack.length;\n    }\n\n    init(w, h, rules, cellSize, cells) {\n        this.rules = rules;\n        this.cellSize = cellSize;\n        this.batchSize = this.batchMultiplier * this.cellSize;\n        let workerData = {\n            message: 'start',\n            w: w,\n            h: h,\n            rules: rules,\n            generations: this.batchSize,\n            cells: cells\n        };\n        this.wrkr.postMessage(workerData);\n    }\n\n    keepStack() {\n        let minStackSize = this.batchSize;\n        this.stackCheckHandle = setInterval(() => {\n            if (this.stackSize < this.batchSize) {\n                console.log('getBatch');\n                this.getBatch();\n                clearInterval(this.stackCheckHandle);\n            }\n        }, 100);\n    }\n\n    stop() {\n        let workerData = {\n            message: 'stop',\n        };\n        this.stopHandle = setInterval(() => {\n            this.wrkr.postMessage(workerData);\n        }, 10);\n    }\n\n    getBatch(cells) {\n        let workerData = {\n            message: 'resume',\n            rules: this.rules,\n            generations: this.batchSize,\n            cells: cells\n        };\n        this.wrkr.postMessage(workerData);\n    }\n\n}\n"],"sourceRoot":"../src"}